{"assets":[{"title":"Connect to pieces OS - (PNG Image)","id":"64c9275d-3d3f-42e0-a314-600e4bf45767","type":"IMAGE","raw":"    import requests\n\n    def connect_to_pieces_os(port):\n        endpoint = f\"http://localhost:{port}/connect\"\n        seeded_application = {\n            'application': {\n                      \"'name': 'OPEN_SOURCE',\n                      'version': '0.0.1\"',\n                    ‚Äòplatform‚Äô: 'MACOS',\n\n            response   requests.    (endpoint, json=seeded_ application)\n\n            if not response.\n                raise Exception(f\"HTTP error! status: {response.\n\n            context = response.    ()\n            return context\n\n        except Exception as error:\n            print('Error:', error)\n            ralse error\n\n \n","language":"py","time":"about a month ago","created":"2025-04-26T17:35:42.781Z","annotations":[],"updated":"2025-04-26T17:36:02.335Z"},{"title":"Exponential Backoff Retry Function in TypeScript","id":"b8e850fe-dfc5-4a7f-9ff1-f5e309d901ba","type":"CODE","raw":"/**\n * Executes a function with exponential backoff retry logic\n * \n * @param fn - The async function to execute\n * @param options - Configuration options\n * @returns The result of the function\n * @throws The last error encountered after max retries\n */\nexport async function withBackoff<T>(\n  fn: () => Promise<T>,\n  options: {\n    maxRetries?: number;       // Maximum number of retry attempts\n    initialDelay?: number;     // Starting delay in milliseconds\n    maxDelay?: number;         // Maximum delay cap in milliseconds\n    factor?: number;           // Exponential factor\n    jitter?: boolean;          // Add randomness to delay\n    onRetry?: (error: Error, attempt: number, delay: number) => void;  // Called before each retry\n  } = {}\n): Promise<T> {\n  const {\n    maxRetries = 3,\n    initialDelay = 100,\n    maxDelay = 10000,\n    factor = 2,\n    jitter = true,\n    onRetry = () => {}\n  } = options;\n  \n  let attempt = 0;\n  let lastError: Error;\n\n  while (attempt <= maxRetries) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      \n      if (attempt >= maxRetries) {\n        break;\n      }\n      \n      // Calculate delay with exponential backoff\n      let delay = initialDelay * Math.pow(factor, attempt);\n      \n      // Apply maximum delay cap\n      delay = Math.min(delay, maxDelay);\n      \n      // Add jitter if enabled (up to 25% variance)\n      if (jitter) {\n        delay = delay * (0.75 + Math.random() * 0.5);\n      }\n      \n      // Call the onRetry callback\n      onRetry(lastError, attempt + 1, delay);\n      \n      // Wait for the calculated delay\n      await new Promise(resolve => setTimeout(resolve, delay));\n      \n      attempt++;\n    }\n  }\n  \n  throw lastError!;\n}\n\n/* Usage examples:\n\n// Simple usage\ntry {\n  const data = await withBackoff(() => fetchData(url));\n  console.log(data);\n} catch (error) {\n  console.error(\"Failed after multiple retries:\", error);\n}\n\n// Advanced configuration\nconst result = await withBackoff(\n  () => apiRequest(),\n  {\n    maxRetries: 5,\n    initialDelay: 200,\n    maxDelay: 30000,\n    factor: 3,\n    jitter: true,\n    onRetry: (error, attempt, delay) => {\n      console.log(`Retry ${attempt} after ${delay}ms due to ${error.message}`);\n    }\n  }\n);\n*/\n","language":"ts","time":"about a month ago","created":"2025-04-26T17:35:44.407Z","annotations":[],"updated":"2025-04-26T17:35:56.032Z"},{"title":"Welcome to your Personal Pieces Drive","id":"25b2cb5b-23fd-47e3-b67a-5480a824d8c9","type":"TEXT","raw":"Welcome to your Personal Pieces Drive üòÉ\n\nThis is an example text snippet saved in your Drive. In your Drive you can:\n1. Save valuable or re-usable code or text snippets\n2. Share snippets with friends or colleagues\n3. Extract code or text from screenshots\n4. Discover code snippets from your local repositories\n\nTo save a snippet, copy some code from one of your repos, then paste into Pieces üëç\n\nFor more information, visit our docs at docs.pieces.app üìñ","language":"text","time":"about a month ago","created":"2025-04-26T17:35:46.304Z","annotations":[],"updated":"2025-04-26T17:36:06.567Z"}],"gptContexts":[],"gptFolderNames":[],"enrichedCode":{}}